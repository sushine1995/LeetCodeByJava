/** 
* @author  suzw
* @version 创建时间：2018年10月9日 上午10:16:15 
* 类说明
* 随机一题
//思路：
 *如果子树中同时包含了p和q，那么该节点就是LCA；如果
 	1. 分别在左右子树中搜索p和q，如果

给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]
        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
示例 1:
输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。
示例 2:
输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出: 5
解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。
说明:
所有节点的值都是唯一的。
p、q 为不同节点且均存在于给定的二叉树中。 

*/
public class _236_Lowest_Common_Ancestor_Of_A_Binary_Tree_二叉树的最近公共祖先 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	 public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
	     if (root == null || p == root || q == root) {
	    	 return root;
			
		}   
	     
	     TreeNode left = lowestCommonAncestor(root.left, p, q);
	     TreeNode right = lowestCommonAncestor(root.right, p, q);
	     
		 
		 return left!=null && right!= null ? root:(left!=null?left:right);
	    }
}
